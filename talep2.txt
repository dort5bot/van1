bu dosyadaki içerikleri istenen modül ve bu modülün yapısını açıklar
=================================================================
===	istenen analiz modülüne ait özellikler
=================================================================
Notlar:Gerekli Endpoint şunlar için /fapi/v1/account + /fapi/v1/positionRisk + /fapi/v2/balance yerine /fapi/v2/account kullanılacak

Modül adı -  .py dosya adı -  Gerekli Endpoint(ler) -  API Türü -  eklenecek Zorunlu Klasik Metrikler -  eklenecek Profesyonel Metrikler (öncelik: * yüksek / ** orta / *** düşük) -  Amaç -  Çıktı Türü -  Komut -  İş Tipi -  Paralel Tür -  
A. Trend & Momentum (TA) -  trend_moment.py -  /api/v3/klines, /api/v3/ticker/24hr, /api/v3/avgPrice -  Spot Public -  EMA, RSI, MACD, Bollinger Bands, ATR + ADX (Directional Index), Stochastic RSI, Momentum Oscillator -  *Kalman Filter Trend, *Z-Score Normalization, **Wavelet Transform, **Hilbert Transform Slope, **Fractal Dimension Index (FDI) -  Fiyat yönü & momentum gücü -  Trend Score (0–1) -  /trend, /t -  CPU-bound -  Batch -  




--------------------------------
bu modülün yapısı şu yapıda olmalıdır
---------------------------------
1- dosya yapısı agaç yapı
2- modüllerin genel özellikleri
3- modül için şablon
4- modüle ait config şablonu
5- veri kaynağı sınıf ve alt endpoid isim bilgisi

=================================================================
===	1 dosya yapısı agça yapı
=================================================================
analysis/
├── analysis_base_module.py          # 
├── analysis_core.py                 # Ana aggregator
├── analysis_router.py               # FastAPI router
├── analysis_schema_manager.py       # Schema yöneticisi
├── analysis_metric_schema.yaml      # Schema tanımı
├── trend_moment.py                  # Modül implementasyonları
│
├── config/					# modüller için Hybrid config Yapı
│   ├── __init__.py
│   ├── base.py              # Base config sınıfları
│   ├── trend.py             # Trend-specific config
│   ├── ...
│   └── loader.py            # Merkezi config yükleyici
├── analysis_base_module.py
├── analysis_core.py
└── ...

=================================================================
===	2- modüllerin genel özellikleri
=================================================================
liste modül geliştirme için kontrol çerçevesi
---
ön hedef:
class tabanlı (BaseAnalysisModule),
config tabanlı (configTrend.py),
async & batch uyumlu,
skorlaması açıklanabilir,
doğru metrik formülleri,
vektörize edilmiş,
kalibrasyon, threshold, explain alanı,
Prometheus / metric wrapper’ları ile uyumlu şekilde tasarlanan modüller

## 🧱 1️⃣ Yapısal Tutarlılık (Structure & Naming)
**Amaç:** Kod okunabilirliği, modüller arası standardizasyon.
* ✅ Metrik isimlendirmeleri tutarlı (ör. `ema`, `rsi`, `macd_hist`, `kalman_trend`).
* ✅ Class tabanlı yapı mevcut (`class TrendModule(BaseAnalysisModule): ...`).
Interface/Abstract Base Class kullanımı
* ✅ Her modül aynı temel fonksiyon imzasına sahip:
  * `compute_metrics()`
  * `aggregate_output()`
  * `generate_report()`
* ✅ Modül başına ayrı config dosyası:
  * `configModülAdı.py` (örnek: `configTrend.py`)
* ✅ Birden fazla sembol aynı anda analiz edilebilir (multi-symbol loop veya batch job destekli).
* ✅ Paralel yapı türü (`Batch / Async / Stream`) tanımlanmış.



## ⚙️ 2️⃣ Hesaplama Kalitesi & Metrik Güvenirliği

**Amaç:** Hesaplanan metriklerin akademik/istatistiksel olarak doğru olması.
* ✅ Metrikler doğru formülle hesaplanıyor (ör. RSI = 100 - 100/(1+RS)).
* ✅ Parametrik config değerleri doğru kullanılıyor (ör. EMA period, Bollinger window).
* ✅ Hesaplanan metriklerin gerçek ve kullanılabilir değer aralıkları var.
* ✅ Numpy/pandas ile **vektörize edilmiş hesaplamalar** — for döngüleri minimize edilmiş.
* ✅ İleri metrikler için uygun kütüphaneler kullanılmış:
  * `pykalman` → Kalman Filter
  * `pywt` → Wavelet
  * `scipy.signal` → Hilbert / detrend
* ✅ Metric dependency graph mevcut (ör. RSI, EMA’ya bağlıysa önce EMA hesaplanır).
Metrik hesaplamaları için @validate_inputs gibi bir decorator kullanılabilir.


## ⚖️ 3️⃣ Skorlama, Normalizasyon & Explainability
**Amaç:** Modülün ürettiği skoru anlamlandırılabilir, açıklanabilir hale getirmek.
* ✅ Skorlama formülü açıkça tanımlı (ör. `trend_score = w1*EMA + w2*RSI + ...`).
* ✅ Ağırlıklar config içinde (`weights = {"ema":0.2, "rsi":0.2, "macd":0.3, ...}`).
* ✅ Normalize işlemi (Z-Score, Min-Max veya Percentile) uygulanmış.
* ✅ `explain` alanı döndürülüyor:
* ✅ Threshold & uyarı sistemi:
  `score > 0.7 → "bullish"`, `score < 0.3 → "bearish"`, aksi “neutral”.
* ✅ Opsiyonel: Kalibrasyon (rolling z-score veya exponentially weighted scaling).
Shapley değeri veya permutation importance gibi metodlar opsiyonel explainability katmanları olarak eklenebilir


## 🚀 4️⃣ Performans & Paralel İşleme Modeli
**Amaç:** Çoklu sembolde yüksek performans, düşük gecikme.
* ✅ CPU-bound işlemler (`Kalman`, `GARCH`) → **ThreadPool / ProcessPool**.
* ✅ IO-bound işlemler (API fetch, WebSocket) → **AsyncIO**.
* ✅ Stream modüllerinde sürekli async iterator (`async for`) yapısı.
* ✅ Vectorization ve caching aktif.
* ✅ Rate-limit handling (Binance API → backoff, retry).
* ✅ Resource cleanup: context manager (`with` yapısı veya async context).
* ✅ Cache TTL (ör. Redis veya internal LRU cache) tanımlı.
asyncio.TaskGroup (Python 3.11+) kullanımı önerilebilir, daha modern ve kontrol edilebilir.
Opsiyonel: joblib veya ray gibi paralel işlem motorları desteklenebilir.

## 🧩 5️⃣ Dokümantasyon & Validation
**Amaç:** Modülün nasıl çalıştığı, hangi metrikleri kullandığı açıkça görülebilsin
* ✅ Her modülün başında docstring:
  ```python
  """Trend & Momentum Analysis
  Metrikler: EMA, RSI, MACD, Kalman
  Çıktı: trend_score (0–1)
  """
  ```

## 🧠 6️⃣ İleri Katmanlar (Opsiyonel ama güçlü)
**Amaç:** Profesyonel seviye ölçeklenebilirlik ve izlenebilirlik.
* ✅ Metric Dependency Graph (DAG) otomatik çözülüyor.
* ✅ Modül bağımlılıkları schema içinde tanımlı.
* ✅ Opsiyonel: Prometheus / Grafana entegrasyonu (metric_export).
* ✅ AsyncIO + ThreadPool mix (CPU + IO hibrit).
* ✅ Versiyonlama: `version = "1.0.0"` modül başında belirtilmiş.

7. Güvenlik ve Veri Bütünlüğü
# ✅ Input validation ve sanitization
# ✅ API key management (environment variables, vault)
# ✅ Rate limiting ve quota management
# ✅ Data integrity checks (checksum, signature verification)

8. Backtesting ve Historical Validation
# ✅ Historical accuracy testing
# ✅ Walk-forward analysis capability
# ✅ Benchmark comparison (vs buy-and-hold)
# ✅ Drawdown and risk metrics
9. Deployment ve DevOps
# ✅ Containerization (Dfile)
# ✅ Health check endpoints
# ✅ Configuration management (feature flags)
# ✅ Rolling update capability


=================================================================
===	3- modül için şablon
=================================================================
"""
Trend & Momentum Analysis Module
================================
Versiyon: 2.2.0 | Lifecycle: Production | Config: config_trend.py

📊 METRİKLER:
- EMA (9, 21, 50)
- RSI (14)
- MACD (12, 26, 9)
- Kalman Filter Trend
- Z-Score Normalization

🎯 ÇIKTILAR:
- trend_score (0-1)
- signal (bullish/neutral/bearish)
- momentum_strength
- explainability components

🔧 ÖZELLİKLER:
- Vektörize hesaplama
- Type-safe config entegrasyonu
- Composite formula desteği
- Prometheus metrikleri
"""

import logging
import numpy as np
import pandas as pd
from datetime import datetime
from typing import Dict, Any, Optional

from prometheus_client import Counter, Gauge, Histogram
from analysis.analysis_base_module import BaseAnalysisModule, legacy_compatible
from analysis.config.loader import config_manager
# Binance API imports
from utils.binance_api.binance_a import BinanceAggregator, MultiUserBinanceAggregator


logger = logging.getLogger(__name__)

# Prometheus
TREND_SCORE_GAUGE = Gauge('trend_score', 'Trend analysis score', ['symbol'])
ANALYSIS_DURATION = Histogram('analysis_duration_seconds', 'Execution time', ['module'])
ERROR_COUNTER = Counter('analysis_errors_total', 'Analysis errors', ['module'])


@legacy_compatible
class TrendModule(BaseAnalysisModule):
    """Trend ve momentum analizi"""

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        if config is None:
            config_data = config_manager.get_config('trend')
            config = config_data.dict() if config_data else {}
        super().__init__(config)

        self.module_name = "TrendAnalysis"
        self.version = "2.2.0"
        self.dependencies = ["ema", "rsi", "macd", "kalman", "zscore"]

    async def compute_metrics(self, symbol: str) -> Dict[str, Any]:
        start = datetime.utcnow()
        try:
            ANALYSIS_DURATION.labels(module='trend').time()
            data = await self._fetch_ohlcv_data(symbol, interval="1h", limit=200)
            metrics = await self._calculate_metrics(data)
            result = self._aggregate(metrics)

            TREND_SCORE_GAUGE.labels(symbol=symbol).set(result["score"])
            return {
                **result,
                "metadata": {
                    "symbol": symbol,
                    "timestamp": start.isoformat() + "Z",
                    "version": self.version
                }
            }
        except Exception as e:
            ERROR_COUNTER.labels(module='trend').inc()
            logger.error(f"Trend computation failed for {symbol}: {e}")
            return {"score": 0.5, "signal": "neutral"}

    async def _calculate_metrics(self, df: pd.DataFrame) -> Dict[str, float]:
        """Vektörize metrik hesaplamaları"""
        close = df['close']
        params = self.config.get("parameters", {})
        metrics = {}

        # EMA
        for p in params.get("ema_periods", [9, 21, 50]):
            metrics[f"ema_{p}"] = float(close.ewm(span=p, adjust=False).mean().iloc[-1])

        # RSI
        diff = close.diff()
        gain = diff.clip(lower=0).rolling(params.get("rsi_period", 14)).mean()
        loss = -diff.clip(upper=0).rolling(params.get("rsi_period", 14)).mean()
        rs = gain / (loss + 1e-9)
        metrics["rsi"] = float((100 - (100 / (1 + rs))).iloc[-1] / 100)

        # MACD
        fast, slow, signal = params.get("macd_params", {"fast": 12, "slow": 26, "signal": 9}).values()
        ema_fast = close.ewm(span=fast).mean()
        ema_slow = close.ewm(span=slow).mean()
        macd = ema_fast - ema_slow
        macd_signal = macd.ewm(span=signal).mean()
        metrics["macd_histogram"] = float(macd.sub(macd_signal).iloc[-1])

        # Kalman & Z-score
        metrics["kalman_trend"] = float(np.clip(np.mean(close.pct_change()) / (np.std(close.pct_change()) + 1e-9), 0, 1))
        metrics["z_score"] = float(((close - close.rolling(20).mean()) / close.rolling(20).std()).iloc[-1])

        return metrics

    def _aggregate(self, metrics: Dict[str, float]) -> Dict[str, Any]:
        weights = self.config.get("weights", {})
        thresholds = self.config.get("thresholds", {})
        formula = self.config.get("composite_formula")

        if formula:
            # Dinamik formül çözümleme
            local_env = {k: v for k, v in metrics.items()}
            try:
                score = eval(formula, {}, local_env)
            except Exception:
                score = sum(v * weights.get(k, 0) for k, v in metrics.items())
        else:
            score = sum(v * weights.get(k, 0) for k, v in metrics.items())

        score = float(np.clip(score, 0, 1))
        signal = "bullish" if score >= thresholds["bullish"] else "bearish" if score <= thresholds["bearish"] else "neutral"

        return {
            "score": score,
            "signal": signal,
            "components": metrics
        }







=================================================================
===	4- modüle ait config şablonu
=================================================================
"""
Trend Analysis Module Configuration
-----------------------------------
Versiyon: 2.2.0 | Lifecycle: Production

🔧 Bu şablon, trend analiz modülü için tip güvenli (type-safe) yapı sunar.
Tüm parametreler modül ile tam uyumludur.
"""

from typing import Dict, Any, List, Optional
from pydantic import BaseModel, Field, validator

from analysis.config.base import BaseModuleConfig


class TrendConfig(BaseModuleConfig):
    """Trend modülü için tip güvenli config"""

    # === PARAMETRELER ===
    parameters: Dict[str, Any] = Field(
        default_factory=lambda: {
            "ema_periods": [9, 21, 50],
            "rsi_period": 14,
            "macd_params": {"fast": 12, "slow": 26, "signal": 9},
            "kalman_observation_noise": 0.1,
            "zscore_window": 20
        },
        description="Trend analizinde kullanılacak parametre seti"
    )

    # === AĞIRLIKLAR ===
    weights: Dict[str, float] = Field(
        default_factory=lambda: {
            "ema_9": 0.15,
            "ema_21": 0.15,
            "ema_50": 0.10,
            "rsi": 0.20,
            "macd_histogram": 0.25,
            "kalman_trend": 0.15
        },
        description="Her metrik için ağırlık dağılımı"
    )

    # === EŞİKLER ===
    thresholds: Dict[str, float] = Field(
        default_factory=lambda: {
            "bullish": 0.65,
            "bearish": 0.35,
            "strong_trend": 0.75,
            "weak_trend": 0.25
        },
        description="Sinyal üretiminde kullanılacak eşikler"
    )

    # === NORMALİZASYON ===
    normalization: Dict[str, str] = Field(
        default_factory=lambda: {"method": "zscore"},
        description="Normalizasyon yöntemi"
    )

    # === PERFORMANS AYARLARI ===
    performance: Dict[str, Any] = Field(
        default_factory=lambda: {"cache_ttl": 300, "timeout": 30, "max_retries": 3},
        description="Performans ve önbellek ayarları"
    )

    # === BİLEŞİK FORMÜL (Opsiyonel) ===
    composite_formula: Optional[str] = Field(
        default="0.25*macd_histogram + 0.2*rsi + 0.2*ema_21 + 0.15*kalman_trend + 0.1*z_score + 0.1*ema_9",
        description="Ağırlıklı metrikleri birleştiren özel formül (opsiyonel)"
    )

    # === VALIDATORS ===
    @validator('weights')
    def validate_weights(cls, v):
        total = sum(v.values())
        if not 0.99 <= total <= 1.01:
            raise ValueError(f"Weights must sum to 1.0, got {total:.3f}")
        return v

    @validator('thresholds')
    def validate_thresholds(cls, v):
        if 'bullish' in v and 'bearish' in v:
            if v['bullish'] <= v['bearish']:
                raise ValueError('Bullish threshold must be greater than bearish threshold')
        return v


# === CONFIG INSTANCE ===
TREND_CONFIG = TrendConfig(
    module_name="TrendAnalysis",
    version="2.2.0",
    lifecycle="production"
)






=================================================================
===	5- veri kaynağı sınıf ve alt endpoid isim bilgisi
=================================================================

# Binance API imports
from utils.binance_api.binance_a import BinanceAggregator, MultiUserBinanceAggregator
Notlar:/fapi/v1/account + /fapi/v1/positionRisk + /fapi/v2/balance yerine /fapi/v2/account kullanılacak

